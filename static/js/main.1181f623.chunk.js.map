{"version":3,"sources":["algorithms/AlgorithmsHelpfulMethods.js","algorithms/BubbleSort.js","algorithms/MargeSort.js","sortVisualizer/SortVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["swap","array","firstIndex","secondIndex","tmp","bubbleSort","animations","N","length","i","j","push","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","middleIdx","Math","floor","doMerge","k","SortVisualizer","useState","darkMode","setDarkMode","isSorting","setIsSorting","arraySize","setArraySize","setArray","algorithm","setAlgorithm","generateArray","console","log","tempArray","round","random","useEffect","mergeSort","slice","mergeSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","bubbleSortAnimations","bubbleSortInr","setInterval","tmpBarOneHeight","parseInt","clearInterval","className","onClick","onChange","event","target","value","type","name","id","htmlFor","map","barHeight","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1181f623.chunk.js","sourcesContent":["export const swap = (array, firstIndex, secondIndex) => {\r\n    let tmp = array[firstIndex];\r\n    array[firstIndex] = array[secondIndex];\r\n    array[secondIndex] = tmp;\r\n};\r\n\r\nexport const compareArrays = (firstArray, secondArray) => {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n","import { swap, compareArrays } from \"./AlgorithmsHelpfulMethods\";\r\n\r\nexport const bubbleSortAnimations = (array) => {\r\n    let tmpArr = array;\r\n    let animations = [];\r\n    bubbleSort(tmpArr, animations);\r\n    return animations;\r\n};\r\n\r\nconst bubbleSort = (array, animations) => {\r\n    const N = array.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        for (let j = 0; j < N - i - 1; j++) {\r\n            animations.push([0, j, j + 1]);\r\n            if (array[j] > array[j + 1]) {\r\n                animations.push([1, j, j + 1]);\r\n                swap(array, j, j + 1);\r\n            } else animations.push([2, j, j + 1]);\r\n        }\r\n    }\r\n};\r\n","export const mergeSortAnimations = (array) => {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n};\r\n\r\nconst mergeSortHelper = (\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) => {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n};\r\n\r\nconst doMerge = (\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) => {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { bubbleSortAnimations } from \"../algorithms/BubbleSort\";\r\nimport { mergeSortAnimations } from \"../algorithms/MargeSort\";\r\nimport \"./SortVisualizer.css\";\r\n//import { bubbleSortAnimations } from \"./algorithms/BubbleSort\";\r\n\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\nconst L_PRIMARY_BAR_COLOR = \"#824396\";\r\nconst D_PRIMARY_BAR_COLOR = \"#a74f53\";\r\nconst ACTIVE_BAR_COLOR = \"green\";\r\n\r\nconst SortVisualizer = () => {\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [arraySize, setArraySize] = useState(100);\r\n    const [array, setArray] = useState([]);\r\n    const [algorithm, setAlgorithm] = useState(\"bubbleSort\");\r\n\r\n    const generateArray = () => {\r\n        console.log(isSorting);\r\n        if (!isSorting) {\r\n            const tempArray = [];\r\n            for (let i = 0; i < arraySize; i++) {\r\n                tempArray.push(Math.round(Math.random() * 96) + 2);\r\n            }\r\n            setArray(tempArray);\r\n        }\r\n    };\r\n\r\n    useEffect(generateArray, [setArray]);\r\n\r\n    const updateArraySize = (event) => {\r\n        if (!isSorting) setArraySize(event.target.value);\r\n    };\r\n\r\n    const updateAlgorithm = (event) => {\r\n        if (!isSorting) setAlgorithm(event.target.value);\r\n    };\r\n\r\n    const startSorting = () => {\r\n        setIsSorting(true);\r\n        switch (algorithm) {\r\n            case \"bubbleSort\":\r\n                bubbleSort();\r\n                break;\r\n            // case \"insertionSort\": insertionSort();\r\n            case \"mergeSort\":\r\n                mergeSort();\r\n                break;\r\n            // case \"quickSort\": quickSort();\r\n            default:\r\n                setIsSorting(false);\r\n                break;\r\n        }\r\n    };\r\n    //--------------------------------------------------\r\n    //--------------------merge sort------------------\r\n    //--------------------------------------------------\r\n\r\n    const mergeSort = () => {\r\n        const animations = mergeSortAnimations(array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color =\r\n                    i % 3 === 0\r\n                        ? ACTIVE_BAR_COLOR\r\n                        : darkMode\r\n                        ? D_PRIMARY_BAR_COLOR\r\n                        : L_PRIMARY_BAR_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}%`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        setIsSorting(false);\r\n    };\r\n\r\n    //--------------------------------------------------\r\n    //--------------------bubble sort-----------------\r\n    //--------------------------------------------------\r\n\r\n    const bubbleSort = () => {\r\n        const animations = bubbleSortAnimations([...array]);\r\n        let i = -1;\r\n\r\n        let bubbleSortInr = setInterval(() => {\r\n            i++;\r\n\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n            const barOneStyle = arrayBars[animations[i][1]].style;\r\n            const barTwoStyle = arrayBars[animations[i][2]].style;\r\n            barOneStyle.backgroundColor = barTwoStyle.backgroundColor = ACTIVE_BAR_COLOR;\r\n\r\n            if (animations[i][0] === 1) {\r\n                const tmpBarOneHeight = barOneStyle.height;\r\n                barOneStyle.height = `${parseInt(barTwoStyle.height)}%`;\r\n                barTwoStyle.height = `${parseInt(tmpBarOneHeight)}%`;\r\n                barOneStyle.backgroundColor = barTwoStyle.backgroundColor = darkMode\r\n                    ? D_PRIMARY_BAR_COLOR\r\n                    : L_PRIMARY_BAR_COLOR;\r\n            } else if (animations[i][0] === 2) {\r\n                barOneStyle.backgroundColor = barTwoStyle.backgroundColor = darkMode\r\n                    ? D_PRIMARY_BAR_COLOR\r\n                    : L_PRIMARY_BAR_COLOR;\r\n            }\r\n\r\n            if (i == animations.length - 1) {\r\n                setIsSorting(false);\r\n                clearInterval(bubbleSortInr);\r\n            }\r\n        }, 10);\r\n    };\r\n    //--------------------------------------------------\r\n    //--------------------bubble sort-----------------\r\n    //--------------------------------------------------\r\n    return (\r\n        <div\r\n            className={`SortVisualizer ${\r\n                darkMode ? \"dark-mode\" : \"light-mode\"\r\n            }`}\r\n        >\r\n            <header>\r\n                <nav>\r\n                    <button className=\"nav-item\" onClick={startSorting}>\r\n                        Sort\r\n                    </button>\r\n                    <select\r\n                        className=\"nav-item\"\r\n                        onChange={updateAlgorithm}\r\n                        value={algorithm}\r\n                    >\r\n                        <option value=\"bubbleSort\">Bubble Sort</option>\r\n                        <option value=\"insertionSort\">Insertion Sort</option>\r\n                        <option value=\"mergeSort\">Merge Sort</option>\r\n                        <option value=\"quickSort\">Quick Sort</option>\r\n                    </select>\r\n                    <select\r\n                        className=\"nav-item\"\r\n                        onChange={updateArraySize}\r\n                        value={arraySize}\r\n                    >\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"50\">50</option>\r\n                        <option value=\"100\">100</option>\r\n                        <option value=\"200\">200</option>\r\n                        <option value=\"300\">300</option>\r\n                    </select>\r\n                    <button className=\"nav-item\" onClick={generateArray}>\r\n                        Generate\r\n                    </button>\r\n                    <div className=\"onoffswitch\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"onoffswitch\"\r\n                            className=\"onoffswitch-checkbox\"\r\n                            id=\"myonoffswitch\"\r\n                        />\r\n                        <label\r\n                            className=\"onoffswitch-label\"\r\n                            htmlFor=\"myonoffswitch\"\r\n                            onClick={() => {\r\n                                setDarkMode(!darkMode);\r\n                            }}\r\n                        >\r\n                            <span className=\"onoffswitch-inner\"></span>\r\n                            <span className=\"onoffswitch-switch\"></span>\r\n                        </label>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n\r\n            <div className=\"visualizer-container\">\r\n                {array.map((barHeight, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"array-bar\"\r\n                        style={{\r\n                            height: `${barHeight}%`,\r\n                        }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortVisualizer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SortVisualizer from \"./sortVisualizer/SortVisualizer\";\n\nconst App = () => (\n    <div className=\"App\">\n        <SortVisualizer />\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}