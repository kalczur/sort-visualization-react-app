{"version":3,"sources":["sortVisualizer/SortVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortVisualizer","useState","darkMode","setDarkMode","isSorting","arraySize","setArraySize","array","setArray","generateArray","tempArray","i","push","Math","round","random","useEffect","className","value","onChange","event","target","onClick","type","name","id","htmlFor","map","barHeight","index","key","style","height","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRA0FeA,G,MAvFQ,WAAO,IAAD,EACOC,oBAAS,GADhB,mBAClBC,EADkB,KACRC,EADQ,OAESF,oBAAS,GAFlB,mBAElBG,EAFkB,aAGSH,mBAAS,MAHlB,mBAGlBI,EAHkB,KAGPC,EAHO,OAICL,mBAAS,IAJV,mBAIlBM,EAJkB,KAIXC,EAJW,KAMnBC,EAAgB,WAClB,IAAKL,EAAW,CAEZ,IADA,IAAMM,EAAY,GACTC,EAAI,EAAGA,EAAIN,EAAWM,IAC3BD,EAAUE,KAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAEpDP,EAASE,KAIjBM,oBAAUP,EAAe,IAMzB,OACI,yBACIQ,UAAS,yBACLf,EAAW,YAAc,eAG7B,gCACI,6BACI,4BAAQe,UAAU,YAAlB,QACA,4BAAQA,UAAU,YACd,4BAAQC,MAAM,cAAd,eACA,4BAAQA,MAAM,iBAAd,kBACA,4BAAQA,MAAM,aAAd,cACA,4BAAQA,MAAM,aAAd,eAEJ,4BACID,UAAU,WACVE,SArBI,SAACC,GAChBhB,GAAWE,EAAac,EAAMC,OAAOH,QAqB1BA,MAAOb,GAEP,4BAAQa,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,QAEJ,4BAAQD,UAAU,WAAWK,QAASb,GAAtC,YAGA,yBAAKQ,UAAU,eACX,2BACIM,KAAK,WACLC,KAAK,cACLP,UAAU,uBACVQ,GAAG,kBAEP,2BACIR,UAAU,oBACVS,QAAQ,gBACRJ,QAAS,WACLnB,GAAaD,KAGjB,0BAAMe,UAAU,sBAChB,0BAAMA,UAAU,2BAMhC,yBAAKA,UAAU,wBACVV,EAAMoB,KAAI,SAACC,EAAWC,GAAZ,OACP,yBACIC,IAAKD,EACLZ,UAAU,YACVc,MAAO,CACHC,OAAO,GAAD,OAAKJ,EAAL,eCvEnBK,EANH,kBACR,yBAAKhB,UAAU,OACX,kBAAC,EAAD,QCMYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eb0ca5b6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./SortVisualizer.css\";\r\n\r\nconst SortVisualizer = () => {\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [arraySize, setArraySize] = useState(100);\r\n    const [array, setArray] = useState([]);\r\n\r\n    const generateArray = () => {\r\n        if (!isSorting) {\r\n            const tempArray = [];\r\n            for (let i = 0; i < arraySize; i++) {\r\n                tempArray.push(Math.round(Math.random() * 98) + 2);\r\n            }\r\n            setArray(tempArray);\r\n        }\r\n    };\r\n\r\n    useEffect(generateArray, []);\r\n\r\n    const updateArraySize = (event) => {\r\n        if (!isSorting) setArraySize(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={`SortVisualizer ${\r\n                darkMode ? \"dark-mode\" : \"light-mode\"\r\n            }`}\r\n        >\r\n            <header>\r\n                <nav>\r\n                    <button className=\"nav-item\">Sort</button>\r\n                    <select className=\"nav-item\">\r\n                        <option value=\"bubbleSort\">Bubble Sort</option>\r\n                        <option value=\"insertionSort\">Insertion Sort</option>\r\n                        <option value=\"mergeSort\">Merge Sort</option>\r\n                        <option value=\"quickSort\">Quick Sort</option>\r\n                    </select>\r\n                    <select\r\n                        className=\"nav-item\"\r\n                        onChange={updateArraySize}\r\n                        value={arraySize}\r\n                    >\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"50\">50</option>\r\n                        <option value=\"100\">100</option>\r\n                        <option value=\"200\">200</option>\r\n                        <option value=\"300\">300</option>\r\n                    </select>\r\n                    <button className=\"nav-item\" onClick={generateArray}>\r\n                        Generate\r\n                    </button>\r\n                    <div className=\"onoffswitch\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"onoffswitch\"\r\n                            className=\"onoffswitch-checkbox\"\r\n                            id=\"myonoffswitch\"\r\n                        />\r\n                        <label\r\n                            className=\"onoffswitch-label\"\r\n                            htmlFor=\"myonoffswitch\"\r\n                            onClick={() => {\r\n                                setDarkMode(!darkMode);\r\n                            }}\r\n                        >\r\n                            <span className=\"onoffswitch-inner\"></span>\r\n                            <span className=\"onoffswitch-switch\"></span>\r\n                        </label>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n\r\n            <div className=\"visualizer-container\">\r\n                {array.map((barHeight, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"array-bar\"\r\n                        style={{\r\n                            height: `${barHeight}%`,\r\n                        }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortVisualizer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SortVisualizer from \"./sortVisualizer/SortVisualizer\";\n\nconst App = () => (\n    <div className=\"App\">\n        <SortVisualizer />\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}