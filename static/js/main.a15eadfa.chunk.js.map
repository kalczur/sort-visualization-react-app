{"version":3,"sources":["algorithms/AlgorithmsHelpfulMethods.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","sortVisualizer/SortVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["swap","array","firstIndex","secondIndex","tmp","bubbleSort","animations","N","length","i","j","push","insertionSort","inputArr","key","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","middleIdx","Math","floor","doMerge","k","quickSortAnimations","quickSort","items","left","right","index","pivotIdx","pivot","partition","SortVisualizer","useState","darkMode","setDarkMode","isSorting","setIsSorting","arraySize","setArraySize","setArray","algorithm","setAlgorithm","speed","setSpeed","time","setTime","showTimeBar","setShowTimeBar","useEffect","localStorage","setItem","getItem","generateArray","window","location","reload","tempArray","parseInt","random","visualizeAnimations","t0","performance","now","sortVisualizationInr","setInterval","arrayBars","document","getElementsByClassName","barOneStyle","style","barTwoStyle","backgroundColor","setTimeout","tmpBarOneHeight","height","tmpArray","t1","printSuccess","clearInterval","className","onClick","bubbleSortAnimations","insertionSortAnimations","slice","mergeSortAnimations","onChange","event","target","value","e","type","name","id","checked","htmlFor","map","barHeight","opacity","toFixed","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a15eadfa.chunk.js","sourcesContent":["export const swap = (array, firstIndex, secondIndex) => {\r\n    let tmp = array[firstIndex];\r\n    array[firstIndex] = array[secondIndex];\r\n    array[secondIndex] = tmp;\r\n};\r\n","import { swap } from \"./AlgorithmsHelpfulMethods\";\r\n\r\nexport const bubbleSortAnimations = (array) => {\r\n    let animations = [];\r\n    bubbleSort(array, animations);\r\n\r\n    return animations;\r\n};\r\n\r\nconst bubbleSort = (array, animations) => {\r\n    const N = array.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        for (let j = 0; j < N - i - 1; j++) {\r\n            animations.push([0, j, j + 1]);\r\n\r\n            if (array[j] > array[j + 1]) {\r\n                swap(array, j, j + 1);\r\n                animations.push([1, j, j + 1]);\r\n            }\r\n        }\r\n    }\r\n};\r\n","export const insertionSortAnimations = (array) => {\r\n    let animations = [];\r\n    insertionSort(array, animations);\r\n    return animations;\r\n};\r\n\r\nconst insertionSort = (inputArr, animations) => {\r\n    const length = inputArr.length;\r\n\r\n    for (let i = 1; i < length; i++) {\r\n        let key = inputArr[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && inputArr[j] > key) {\r\n            inputArr[j + 1] = inputArr[j];\r\n            animations.push([0, i, j]);\r\n            animations.push([2, j + 1, inputArr[j]]);\r\n            j = j - 1;\r\n        }\r\n        inputArr[j + 1] = key;\r\n        animations.push([2, j + 1, key]);\r\n    }\r\n};\r\n","export const mergeSortAnimations = (array) => {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n};\r\n\r\nconst mergeSortHelper = (\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) => {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n};\r\n\r\nconst doMerge = (\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) => {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([0, i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([2, k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([2, k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([0, i, i]);\r\n        animations.push([2, k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([0, j, j]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n};\r\n","import { swap } from \"./AlgorithmsHelpfulMethods\";\r\n\r\nexport const quickSortAnimations = (array) => {\r\n    let animations = [];\r\n    quickSort(array, 0, array.length - 1, animations);\r\n    return animations;\r\n};\r\n\r\nfunction partition(items, left, right, animations) {\r\n    let pivotIdx = Math.floor((right + left) / 2);\r\n    let pivot = items[pivotIdx],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (items[i] < pivot) {\r\n            i++;\r\n            animations.push([0, i, pivotIdx]);\r\n        }\r\n        while (items[j] > pivot) {\r\n            j--;\r\n            animations.push([0, j, pivotIdx]);\r\n        }\r\n        if (i <= j) {\r\n            swap(items, i, j);\r\n            animations.push([1, i, j]);\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction quickSort(items, left, right, animations) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = partition(items, left, right, animations);\r\n        if (left < index - 1) {\r\n            quickSort(items, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            quickSort(items, index, right, animations);\r\n        }\r\n    }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { bubbleSortAnimations } from \"../algorithms/BubbleSort\";\r\nimport { insertionSortAnimations } from \"../algorithms/InsertionSort\";\r\nimport { mergeSortAnimations } from \"../algorithms/MergeSort\";\r\nimport { quickSortAnimations } from \"../algorithms/QuickSort\";\r\nimport \"./SortVisualizer.css\";\r\n\r\nconst SWAP_COLOR = \"#4285f4\"; //blue\r\nconst COMPARE_COLOR = \"#34a853\"; //green\r\nconst PRIMARY_COLOR = \"#ea4335\"; //red\r\n\r\nconst SortVisualizer = () => {\r\n    const [darkMode, setDarkMode] = useState(false);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n    const [arraySize, setArraySize] = useState(100);\r\n    const [array, setArray] = useState([]);\r\n    const [algorithm, setAlgorithm] = useState(\"bubbleSort\");\r\n    const [speed, setSpeed] = useState(10);\r\n    const [time, setTime] = useState(0.0);\r\n    const [showTimeBar, setShowTimeBar] = useState(false);\r\n\r\n    useEffect(() => {\r\n        //load color mode form local storage\r\n        if (localStorage.length === 0)\r\n            localStorage.setItem(\"darkMode\", darkMode);\r\n        setDarkMode(localStorage.getItem(\"darkMode\") === \"true\" ? true : false);\r\n        generateArray();\r\n    }, []);\r\n\r\n    const generateArray = () => {\r\n        setShowTimeBar(false);\r\n        if (!isSorting) {\r\n            const tempArray = [];\r\n            for (let i = 0; i < arraySize; i++) {\r\n                tempArray.push(parseInt(Math.random() * 96) + 2);\r\n            }\r\n            setArray(tempArray);\r\n        } else {\r\n            window.location.reload(true);\r\n        }\r\n    };\r\n\r\n    const updateSpeed = (event) => {\r\n        if (!isSorting) setSpeed(event.target.value);\r\n    };\r\n\r\n    const updateArraySize = (event) => {\r\n        if (!isSorting) setArraySize(event.target.value);\r\n    };\r\n\r\n    const updateAlgorithm = (event) => {\r\n        if (!isSorting) setAlgorithm(event.target.value);\r\n    };\r\n\r\n    const startSorting = () => {\r\n        if (isSorting) return;\r\n        setIsSorting(true);\r\n\r\n        // animations is 3xN array\r\n        // [0,x,y] - compare x,y bars\r\n        // [1,x,y] - swap x,y bars\r\n        // [2,x,y] - x value = y value\r\n        let animations = [];\r\n\r\n        switch (algorithm) {\r\n            case \"bubbleSort\":\r\n                animations = bubbleSortAnimations([...array]);\r\n                break;\r\n            case \"insertionSort\":\r\n                animations = insertionSortAnimations([...array]);\r\n                break;\r\n            case \"mergeSort\":\r\n                animations = mergeSortAnimations([...array]);\r\n                break;\r\n            case \"quickSort\":\r\n                animations = quickSortAnimations([...array]);\r\n                break;\r\n            default:\r\n                setIsSorting(false);\r\n                return;\r\n        }\r\n        visualizeAnimations(animations);\r\n    };\r\n\r\n    const visualizeAnimations = (animations) => {\r\n        let i = -1;\r\n        const t0 = performance.now();\r\n\r\n        let sortVisualizationInr = setInterval(() => {\r\n            i++;\r\n\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const barOneStyle = arrayBars[animations[i][1]].style;\r\n\r\n            if (animations[i][0] === 0) {\r\n                const barTwoStyle = arrayBars[animations[i][2]].style;\r\n                barOneStyle.backgroundColor = barTwoStyle.backgroundColor = COMPARE_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, speed);\r\n            } else if (animations[i][0] === 1) {\r\n                const barTwoStyle = arrayBars[animations[i][2]].style;\r\n                const tmpBarOneHeight = barOneStyle.height;\r\n                barOneStyle.backgroundColor = barTwoStyle.backgroundColor = SWAP_COLOR;\r\n                barOneStyle.height = `${parseInt(barTwoStyle.height)}%`;\r\n                barTwoStyle.height = `${parseInt(tmpBarOneHeight)}%`;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, speed);\r\n            } else if (animations[i][0] === 2) {\r\n                barOneStyle.backgroundColor = SWAP_COLOR;\r\n                barOneStyle.height = `${parseInt(animations[i][2])}%`;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, speed);\r\n            }\r\n            if (i === animations.length - 1) {\r\n                let tmpArray = [];\r\n                for (let i = 0; i < arrayBars.length; i++)\r\n                    tmpArray.push(parseInt(arrayBars[i].style.height));\r\n                setArray(tmpArray);\r\n\r\n                const t1 = performance.now();\r\n                printSuccess(t1 - t0);\r\n                clearInterval(sortVisualizationInr);\r\n            }\r\n        }, speed);\r\n    };\r\n\r\n    const printSuccess = (time) => {\r\n        setShowTimeBar(true);\r\n        setTime(time);\r\n        setIsSorting(false);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={`SortVisualizer ${\r\n                darkMode ? \"dark-mode\" : \"light-mode\"\r\n            }`}\r\n        >\r\n            <header>\r\n                <nav>\r\n                    <button className=\"nav-item\" onClick={startSorting}>\r\n                        Sort\r\n                    </button>\r\n                    <select\r\n                        className=\"nav-item\"\r\n                        onChange={updateSpeed}\r\n                        value={speed}\r\n                    >\r\n                        <option value=\"100\">Very slow</option>\r\n                        <option value=\"50\">Slow</option>\r\n                        <option value=\"10\">Medium</option>\r\n                        <option value=\"5\">Fast</option>\r\n                        <option value=\"1\">Very Fast</option>\r\n                    </select>\r\n                    <select\r\n                        className=\"nav-item\"\r\n                        onChange={updateAlgorithm}\r\n                        value={algorithm}\r\n                    >\r\n                        <option value=\"bubbleSort\">Bubble Sort</option>\r\n                        <option value=\"insertionSort\">Insertion Sort</option>\r\n                        <option value=\"mergeSort\">Merge Sort</option>\r\n                        <option value=\"quickSort\">Quick Sort</option>\r\n                    </select>\r\n                    <select\r\n                        className=\"nav-item\"\r\n                        onChange={updateArraySize}\r\n                        value={arraySize}\r\n                    >\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"50\">50</option>\r\n                        <option value=\"100\">100</option>\r\n                        <option value=\"200\">200</option>\r\n                        <option value=\"300\">300</option>\r\n                    </select>\r\n                    <button className=\"nav-item\" onClick={generateArray}>\r\n                        Generate\r\n                    </button>\r\n                    <div className=\"onoffswitch\">\r\n                        <input\r\n                            onChange={(e) => {}}\r\n                            type=\"checkbox\"\r\n                            name=\"onoffswitch\"\r\n                            className=\"onoffswitch-checkbox\"\r\n                            id=\"myonoffswitch\"\r\n                            checked={darkMode}\r\n                        />\r\n                        <label\r\n                            className=\"onoffswitch-label\"\r\n                            htmlFor=\"myonoffswitch\"\r\n                            onClick={() => {\r\n                                // save color mode to local storage\r\n                                setDarkMode(!darkMode);\r\n                                localStorage.setItem(\"darkMode\", !darkMode);\r\n                            }}\r\n                        >\r\n                            <span className=\"onoffswitch-inner\"></span>\r\n                            <span className=\"onoffswitch-switch\"></span>\r\n                        </label>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n\r\n            <div className=\"visualizer-container\">\r\n                {array.map((barHeight, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"array-bar\"\r\n                        style={{\r\n                            height: `${barHeight}%`,\r\n                        }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n\r\n            <div\r\n                className=\"timeBaner\"\r\n                style={{\r\n                    opacity: `${showTimeBar ? 1 : 0}`,\r\n                }}\r\n            >\r\n                {(time / 1000).toFixed(2)}s\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortVisualizer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SortVisualizer from \"./sortVisualizer/SortVisualizer\";\n\nconst App = () => (\n    <div className=\"App\">\n        <SortVisualizer />\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}